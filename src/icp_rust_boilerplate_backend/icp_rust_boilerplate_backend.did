type Error = variant {
  NotFound : record { msg : text };
  NotEnoughStock : record { msg : text };
};
type Result = variant { Ok : StockItem; Err : Error };
type Result_1 = variant { Ok : Warehouse; Err : Error };
type Result_2 = variant { Ok; Err : Error };
type StockItem = record {
  updated_at : opt nat64;
  item_name : text;
  created_at : nat64;
  quantity : nat64;
  warehouse_id : nat64;
  item_id : nat64;
};
type StockItemPayload = record {
  item_name : text;
  quantity : nat64;
  warehouse_id : nat64;
};
type Warehouse = record { id : nat64; name : text; created_at : nat64 };
type WarehousePayload = record { name : text };
service : {
  add_item_to_warehouse : (StockItemPayload) -> (Result);
  add_warehouse : (WarehousePayload) -> (Result_1);
  check_stock : (nat64) -> (Result) query;
  delete_item : (nat64, nat64) -> (Result);
  delete_warehouse : (nat64) -> (Result_2);
  get_all_warehouses_with_stocks : () -> (
      vec record { Warehouse; vec StockItem },
    ) query;
  get_warehouse : (nat64) -> (Result_1) query;
  get_warehouse_stock : (nat64) -> (vec StockItem) query;
  transfer_item : (nat64, nat64, nat64, nat64) -> (Result_2);
}
